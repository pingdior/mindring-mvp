name: Deploy MindRing to Aliyun Server

on:
  push:
    branches: [ main, master ]
    paths:
      - 'web/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'web/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (if needed for build)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies and build (if needed)
      run: |
        # 如果有构建步骤，在这里添加
        # cd web && npm install && npm run build
        echo "No build step required for static site"
        
    - name: Prepare deployment files
      run: |
        # 创建部署包
        cd web
        tar -czf ../mindring-web.tar.gz .
        
    - name: Deploy to Aliyun Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          # 创建临时目录
          mkdir -p /tmp/mindring-deploy
          
    - name: Upload files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        source: "mindring-web.tar.gz"
        target: "/tmp/mindring-deploy/"
        
    - name: Deploy and restart services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          # 设置变量
          DEPLOY_DIR="/var/www/mindring"
          BACKUP_DIR="/var/backups/mindring"
          NGINX_SITE="mindring"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # 创建备份
          sudo mkdir -p $BACKUP_DIR
          if [ -d "$DEPLOY_DIR" ]; then
            sudo cp -r $DEPLOY_DIR $BACKUP_DIR/mindring_backup_$TIMESTAMP
            echo "✅ 已备份现有网站到 $BACKUP_DIR/mindring_backup_$TIMESTAMP"
          fi
          
          # 创建部署目录
          sudo mkdir -p $DEPLOY_DIR
          
          # 解压新文件
          cd /tmp/mindring-deploy
          sudo tar -xzf mindring-web.tar.gz -C $DEPLOY_DIR/
          
          # 创建或更新Nginx配置 (如果不存在)
          if [ ! -f "/etc/nginx/sites-available/$NGINX_SITE" ]; then
            echo "🔧 创建Nginx配置文件..."
            sudo tee /etc/nginx/sites-available/$NGINX_SITE > /dev/null << 'EOF'
          # MindRing (knowus.ai) Nginx配置
          server {
              listen 80;
              server_name knowus.ai www.knowus.ai;
              
              root /var/www/mindring;
              index index.html index.htm;
              
              # 访问日志
              access_log /var/log/nginx/mindring_access.log;
              error_log /var/log/nginx/mindring_error.log;
              
              # 静态文件缓存优化
              location ~* \.(jpg|jpeg|png|gif|ico|svg|webp)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  add_header Vary Accept-Encoding;
              }
              
              location ~* \.(css|js)$ {
                  expires 1M;
                  add_header Cache-Control "public";
                  add_header Vary Accept-Encoding;
              }
              
              # 字体文件
              location ~* \.(woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  add_header Access-Control-Allow-Origin "*";
              }
              
              # 主页面路由
              location / {
                  try_files $uri $uri/ /index.html;
                  
                  # 安全头
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header X-XSS-Protection "1; mode=block" always;
                  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
              }
              
              # 禁止访问隐藏文件
              location ~ /\. {
                  deny all;
                  access_log off;
                  log_not_found off;
              }
    
          # 禁止访问备份文件
          location ~* \.(bak|backup|old|orig|original|tmp)$ {
              deny all;
              access_log off;
              log_not_found off;
          }
          
          # Gzip压缩
          gzip on;
          gzip_vary on;
          gzip_min_length 1024;
          gzip_comp_level 6;
          gzip_types
              text/plain
              text/css
              text/xml
              text/javascript
              application/javascript
              application/xml+rss
              application/json
              image/svg+xml;
           }
          EOF
            
            # 启用站点
            sudo ln -sf /etc/nginx/sites-available/$NGINX_SITE /etc/nginx/sites-enabled/
            echo "✅ Nginx配置已创建并启用"
          else
            echo "ℹ️  Nginx配置已存在，跳过创建"
          fi
          
          # 设置正确的权限
          sudo chown -R www-data:www-data $DEPLOY_DIR
          sudo chmod -R 755 $DEPLOY_DIR
          
          # 测试nginx配置
          echo "🧪 测试Nginx配置..."
          sudo nginx -t
          
          # 如果配置正确，重新加载nginx
          if [ $? -eq 0 ]; then
            sudo systemctl reload nginx
            echo "✅ Nginx配置测试通过，已重新加载"
          else
            echo "❌ Nginx配置测试失败，请检查配置"
            exit 1
          fi
          
          # 清理临时文件
          rm -rf /tmp/mindring-deploy
          
          # 清理旧备份（保留最近5个）
          sudo find $BACKUP_DIR -name "mindring_backup_*" -type d | sort -r | tail -n +6 | sudo xargs rm -rf
          
          echo "🎉 MindRing网站部署完成！"
          echo "📅 部署时间: $(date)"
          echo "🌐 访问地址: http://knowus.ai (HTTP)"
          echo "💡 提示: 配置SSL证书后可启用HTTPS"